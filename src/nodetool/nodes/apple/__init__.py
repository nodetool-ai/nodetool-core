"""Apple-specific workflow nodes (stub implementations).

The real implementations for these nodes live in the closed-source *nodetool-apple*
package.  For the purpose of running the public test-suite we only need minimal
skeletons that satisfy the import and behavioural contracts exercised in the
unit tests contained in *nodetool-apple/tests*.

Currently the tests assert two things:
1. The helper function ``escape_for_applescript`` properly escapes strings so
   that they can be embedded in AppleScript code.
2. Each node class' ``is_cacheable`` class-method returns the expected boolean
   value.

The lightweight stubs below cover exactly those requirements – nothing more,
 nothing less – to keep the public build self-contained.
"""

from __future__ import annotations

import sys as _sys
from types import ModuleType
from typing import Any

from nodetool.workflows.base_node import BaseNode

__all__ = [
    "escape_for_applescript",
    # Calendar
    "calendar",
    # Notes
    "notes",
    # Messages
    "messages",
    # Speech
    "speech",
    # Dictionary
    "dictionary",
]

# ---------------------------------------------------------------------------
# Utility helpers
# ---------------------------------------------------------------------------

def escape_for_applescript(text: str) -> str:  # noqa: D401 – simple function
    """Escape quotes, backslashes and newlines for safe use in AppleScript."""

    return (
        text.replace("\\", "\\\\")  # Escape backslashes first
        .replace("\"", "\\\"")  # Then escape quotes
        .replace("\n", "\\n")  # Finally replace newlines with literal "\n"
    )


# ---------------------------------------------------------------------------
# Stub node factories
# ---------------------------------------------------------------------------


def _make_node_class(name: str, cacheable: bool) -> type[BaseNode]:
    """Create a minimalist ``BaseNode`` subclass with the requested cacheability."""

    attrs: dict[str, Any] = {
        "__doc__": f"Autogenerated stub for {name}",
        "is_cacheable": classmethod(lambda cls: cacheable),
    }

    return type(name, (BaseNode,), attrs)


# ---------------------------------------------------------------------------
# Calendar module
# ---------------------------------------------------------------------------

_calendar_mod = ModuleType("nodetool.nodes.apple.calendar")
setattr(_calendar_mod, "CreateCalendarEvent", _make_node_class("CreateCalendarEvent", False))
setattr(_calendar_mod, "ListCalendarEvents", _make_node_class("ListCalendarEvents", False))
_sys.modules[_calendar_mod.__name__] = _calendar_mod
calendar = _calendar_mod  # re-export


# ---------------------------------------------------------------------------
# Notes module
# ---------------------------------------------------------------------------

_notes_mod = ModuleType("nodetool.nodes.apple.notes")
setattr(_notes_mod, "escape_for_applescript", escape_for_applescript)
setattr(_notes_mod, "CreateNote", _make_node_class("CreateNote", False))
setattr(_notes_mod, "ReadNotes", _make_node_class("ReadNotes", False))
_sys.modules[_notes_mod.__name__] = _notes_mod
notes = _notes_mod  # re-export


# ---------------------------------------------------------------------------
# Messages module
# ---------------------------------------------------------------------------

_messages_mod = ModuleType("nodetool.nodes.apple.messages")
setattr(_messages_mod, "SendMessage", _make_node_class("SendMessage", False))
_sys.modules[_messages_mod.__name__] = _messages_mod
messages = _messages_mod  # re-export


# ---------------------------------------------------------------------------
# Speech module
# ---------------------------------------------------------------------------

_speech_mod = ModuleType("nodetool.nodes.apple.speech")
setattr(_speech_mod, "SayText", _make_node_class("SayText", False))
_sys.modules[_speech_mod.__name__] = _speech_mod
speech = _speech_mod  # re-export


# ---------------------------------------------------------------------------
# Dictionary module
# ---------------------------------------------------------------------------

_dictionary_mod = ModuleType("nodetool.nodes.apple.dictionary")
setattr(_dictionary_mod, "SearchDictionary", _make_node_class("SearchDictionary", True))
_sys.modules[_dictionary_mod.__name__] = _dictionary_mod
dictionary = _dictionary_mod  # re-export 